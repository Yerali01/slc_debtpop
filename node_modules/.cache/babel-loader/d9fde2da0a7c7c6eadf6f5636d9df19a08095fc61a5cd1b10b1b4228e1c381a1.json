{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\erali\\\\Desktop\\\\web_dev\\\\slc_project\\\\src\\\\DeptPop.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./DebtPop.css\"; // Import external CSS file\n\n// const DebtPop = () => {\n//   const [debtAmount, setDebtAmount] = useState(\"\");\n//   const [bank, setBank] = useState(\"\");\n//   const [duration, setDuration] = useState(\"\");\n//   const [totalPrice, setTotalPrice] = useState(null);\n//   const [expenses, setExpenses] = useState(null);\n//   const [recommendations, setRecommendations] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const bankPercentages = {\n//     kaspi: 0.01,\n//     kaspi_debt: 0.02,\n//     kaspi_deposit: 0.03,\n//     jusan_debt: 0.04,\n//     jusan_deposit: 0.05,\n//   };\n\n//   // Bank display names for better readability\n//   const bankDisplayNames = {\n//     kaspi: \"Kaspi Red\",\n//     kaspi_debt: \"Kaspi Кредит\",\n//     kaspi_deposit: \"Kaspi Депозит\",\n//     jusan_debt: \"Jusan Кредит\",\n//     jusan_deposit: \"Jusan Депозит\",\n//   };\n\n//   // Handle debt amount change\n//   const handleDebtAmountChange = (e) => {\n//     setDebtAmount(e.target.value);\n//   };\n\n//   // Handle bank selection change\n//   const handleBankChange = (e) => {\n//     setBank(e.target.value);\n//   };\n\n//   // Handle duration change\n//   const handleDurationChange = (e) => {\n//     setDuration(e.target.value);\n//   };\n\n//   // Parse AI response to extract recommendations\n//   const parseRecommendations = (response) => {\n//     // Log the full response to console\n//     console.log(\"Full Deepseek Response:\", response);\n\n//     // Look for numbered items (1. 2. 3.) or bullet points\n//     const regex = /(?:\\d+\\.\\s*|\\*\\s*|-)(.+?)(?=\\d+\\.\\s*|\\*\\s*|-|$)/gs;\n//     const matches = [...response.matchAll(regex)].map((match) =>\n//       match[1].trim()\n//     );\n\n//     // If regex didn't find numbered recommendations, split by newlines as fallback\n//     if (matches.length === 0) {\n//       const lineRecommendations = response\n//         .split(\"\\n\")\n//         .filter((line) => line.trim() !== \"\")\n//         .slice(0, 3);\n\n//       console.log(\"Parsed recommendations (by lines):\", lineRecommendations);\n//       return lineRecommendations;\n//     }\n\n//     console.log(\"Parsed recommendations (by regex):\", matches.slice(0, 3));\n//     return matches.slice(0, 3); // Return only the first 3 recommendations\n//   };\n\n//   // Handle the \"Done\" button click\n//   const handleDoneClick = async (e) => {\n//     if (debtAmount && bankPercentages[bank] !== undefined && duration) {\n//       e.preventDefault();\n//       setLoading(true);\n\n//       // Reset previous results\n//       setTotalPrice(null);\n//       setExpenses(null);\n//       setRecommendations([]);\n\n//       try {\n//         console.log(\"Sending request to Deepseek API...\");\n\n//         const prompt = `Provide brief advice for someone with a ${debtAmount} debt at ${bank.replace(\n//           \"_\",\n//           \" \"\n//         )} bank with interest rate of ${\n//           bankPercentages[bank] * 100\n//         }% for a duration of ${duration} months. Give me the text that is just numerated. without extra text. The format is: 1. _______ 2. ______ 3. _____ `;\n\n//         console.log(\"Prompt sent to Deepseek:\", prompt);\n\n//         const res = await fetch(\n//           \"https://openrouter.ai/api/v1/chat/completions\",\n//           {\n//             method: \"POST\",\n//             headers: {\n//               Authorization:\n//                 \"Bearer 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\",\n//               \"Content-Type\": \"application/json\",\n//             },\n//             body: JSON.stringify({\n//               model: \"deepseek/deepseek-r1:free\",\n//               messages: [\n//                 {\n//                   role: \"user\",\n//                   content: prompt,\n//                 },\n//               ],\n//             }),\n//           }\n//         );\n\n//         const data = await res.json();\n//         console.log(\"Full API response:\", data);\n\n//         const aiResponse = data.choices[0].message.content;\n//         console.log(\"Deepseek message content:\", aiResponse);\n\n//         const parsedRecommendations = parseRecommendations(aiResponse);\n//         setRecommendations(parsedRecommendations);\n//       } catch (error) {\n//         console.error(\"Error fetching AI response:\", error);\n//         setRecommendations([\n//           \"Не удалось получить рекомендации. Пожалуйста, попробуйте снова.\",\n//           \"Проверьте ваше интернет-соединение.\",\n//           \"Обратитесь в службу поддержки банка за консультацией.\",\n//         ]);\n//       } finally {\n//         setLoading(false);\n//       }\n\n//       // Calculate debt information\n//       const debt = parseFloat(debtAmount);\n//       const percentage = bankPercentages[bank];\n//       const months = parseInt(duration);\n//       const monthlyInterest = percentage / 12;\n//       const calculatedExpenses = debt * monthlyInterest * months;\n//       const calculatedTotalPrice = debt + calculatedExpenses;\n\n//       setExpenses(calculatedExpenses);\n//       setTotalPrice(calculatedTotalPrice);\n//     }\n//   };\n\n//   return (\n//     <div className=\"layout-container\">\n//       <div className=\"layout-content-container\">\n//         {/* Banner Section */}\n//         <div\n//           className=\"banner\"\n//           style={{\n//             backgroundImage: \"url('/shapka.png')\", // Adjust the path as needed\n//           }}\n//         ></div>\n\n//         {/* Title */}\n//         <h3>DebtPop</h3>\n\n//         {/* Debt Input */}\n//         <div className=\"input-container\">\n//           <label>\n//             <p>Enter the debt amount</p>\n//             <input\n//               type=\"number\"\n//               placeholder=\"100,000\"\n//               value={debtAmount}\n//               onChange={handleDebtAmountChange}\n//             />\n//           </label>\n//         </div>\n\n//         {/* Bank Selection */}\n//         <div className=\"input-container\">\n//           <label>\n//             <p>Select bank</p>\n//             <select value={bank} onChange={handleBankChange}>\n//               <option value=\"\">Select an option</option>\n//               {Object.entries(bankDisplayNames).map(([value, label]) => (\n//                 <option key={value} value={value}>\n//                   {label}\n//                 </option>\n//               ))}\n//             </select>\n//           </label>\n//         </div>\n\n//         {/* Duration Input */}\n//         <div className=\"input-container\">\n//           <label>\n//             <p>Enter duration (months)</p>\n//             <input\n//               type=\"number\"\n//               placeholder=\"12\"\n//               value={duration}\n//               onChange={handleDurationChange}\n//             />\n//           </label>\n//         </div>\n\n//         {/* Button Container */}\n//         <div className=\"button-container\">\n//           <button\n//             onClick={handleDoneClick}\n//             disabled={\n//               !debtAmount ||\n//               isNaN(debtAmount) ||\n//               !bank ||\n//               !duration ||\n//               isNaN(duration) ||\n//               loading\n//             }\n//           >\n//             {loading ? \"Calculating...\" : \"Done\"}\n//           </button>\n//         </div>\n\n//         {/* Results Section - Only shown after calculation */}\n//         {totalPrice !== null && expenses !== null && (\n//           <div className=\"results-section\">\n//             {/* Price Summary */}\n//             <div className=\"price-summary\">\n//               <div>\n//                 <p>Total final price</p>\n//                 <p>{totalPrice.toLocaleString()} ₸</p>\n//               </div>\n//               <div>\n//                 <p>Expenses</p>\n//                 <p>{expenses.toLocaleString()} ₸</p>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n\n//         {/* Hints Section */}\n//         <h3>Hints and Recommendations</h3>\n//         {loading ? (\n//           <div className=\"loading-recommendations\">\n//             <p>Getting personalized recommendations...</p>\n//           </div>\n//         ) : (\n//           <div className=\"recommendations-container\">\n//             {recommendations.length > 0\n//               ? recommendations.map((recommendation, index) => (\n//                   <div key={index} className=\"hint-container\">\n//                     <div className=\"hint-icon\">\n//                       <svg\n//                         xmlns=\"http://www.w3.org/2000/svg\"\n//                         width=\"24px\"\n//                         height=\"24px\"\n//                         fill=\"currentColor\"\n//                         viewBox=\"0 0 256 256\"\n//                       >\n//                         <path d=\"M176,232a8,8,0,0,1-8,8H88a8,8,0,0,1,0-16h80A8,8,0,0,1,176,232Zm40-128a87.55,87.55,0,0,1-33.64,69.21A16.24,16.24,0,0,0,176,186v6a16,16,0,0,1-16,16H96a16,16,0,0,1-16-16v-6a16,16,0,0,0-6.23-12.66A87.59,87.59,0,0,1,40,104.49C39.74,56.83,78.26,17.14,125.88,16A88,88,0,0,1,216,104Z\" />\n//                       </svg>\n//                     </div>\n//                     <p className=\"hint-text\">{recommendation}</p>\n//                   </div>\n//                 ))\n//               : // Default recommendations when no AI recommendations are available yet\n//                 [\n//                   \"Pay off your debt as soon as possible\",\n//                   \"Try to negotiate with the bank for a better rate\",\n//                   \"If you have multiple debts, consider consolidating them\",\n//                 ].map((hint, index) => (\n//                   <div key={index} className=\"hint-container\">\n//                     <div className=\"hint-icon\">\n//                       <svg\n//                         xmlns=\"http://www.w3.org/2000/svg\"\n//                         width=\"24px\"\n//                         height=\"24px\"\n//                         fill=\"currentColor\"\n//                         viewBox=\"0 0 256 256\"\n//                       >\n//                         <path d=\"M176,232a8,8,0,0,1-8,8H88a8,8,0,0,1,0-16h80A8,8,0,0,1,176,232Zm40-128a87.55,87.55,0,0,1-33.64,69.21A16.24,16.24,0,0,0,176,186v6a16,16,0,0,1-16,16H96a16,16,0,0,1-16-16v-6a16,16,0,0,0-6.23-12.66A87.59,87.59,0,0,1,40,104.49C39.74,56.83,78.26,17.14,125.88,16A88,88,0,0,1,216,104Z\" />\n//                       </svg>\n//                     </div>\n//                     <p className=\"hint-text\">{hint}</p>\n//                   </div>\n//                 ))}\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default DebtPop;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DebtPop = () => {\n  _s();\n  const [debtAmount, setDebtAmount] = useState(\"\");\n  const [bank, setBank] = useState(\"\");\n  const [duration, setDuration] = useState(\"\");\n  const [totalPrice, setTotalPrice] = useState(null);\n  const [expenses, setExpenses] = useState(null);\n  const [recommendations, setRecommendations] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const bankPercentages = {\n    kaspi: 0.01,\n    kaspi_debt: 0.02,\n    kaspi_deposit: 0.03,\n    jusan_debt: 0.04,\n    jusan_deposit: 0.05\n  };\n\n  // Bank display names for better readability\n  const bankDisplayNames = {\n    kaspi: \"Kaspi Red\",\n    kaspi_debt: \"Kaspi Кредит\",\n    kaspi_deposit: \"Kaspi Депозит\",\n    jusan_debt: \"Jusan Кредит\",\n    jusan_deposit: \"Jusan Депозит\"\n  };\n\n  // Handle debt amount change\n  const handleDebtAmountChange = e => {\n    setDebtAmount(e.target.value);\n  };\n\n  // Handle bank selection change\n  const handleBankChange = e => {\n    setBank(e.target.value);\n  };\n\n  // Handle duration change\n  const handleDurationChange = e => {\n    setDuration(e.target.value);\n  };\n\n  // Parse AI response to extract recommendations\n  const parseRecommendations = response => {\n    // Log the full response to console\n    console.log(\"Full Deepseek Response:\", response);\n\n    // Look for numbered items (1. 2. 3.) or bullet points\n    const regex = /(?:\\d+\\.\\s*|\\*\\s*|-)(.+?)(?=\\d+\\.\\s*|\\*\\s*|-|$)/gs;\n    const matches = [...response.matchAll(regex)].map(match => match[1].trim());\n\n    // If regex didn't find numbered recommendations, split by newlines as fallback\n    if (matches.length === 0) {\n      const lineRecommendations = response.split(\"\\n\").filter(line => line.trim() !== \"\").slice(0, 3);\n      console.log(\"Parsed recommendations (by lines):\", lineRecommendations);\n      return lineRecommendations;\n    }\n    console.log(\"Parsed recommendations (by regex):\", matches.slice(0, 3));\n    return matches.slice(0, 3); // Return only the first 3 recommendations\n  };\n\n  // Calculate total price and expenses based on bank type\n  const calculateFinancials = (debt, percentage, months, bankType) => {\n    const r = percentage;\n    const S = debt;\n    const n = months;\n    let totalAmount = 0;\n    let expensesAmount = 0;\n\n    // For credit products: ((S * r/12) / (1- (1+r/12)^-n)) * 12\n    if (bankType.includes(\"debt\")) {\n      const monthlyRate = r / 12;\n      const denominator = 1 - Math.pow(1 + monthlyRate, -n);\n      const monthlyPayment = S * monthlyRate / denominator;\n      totalAmount = monthlyPayment * n;\n      expensesAmount = totalAmount - S;\n    }\n    // For deposit products: (S * (1+r/12)^n) * 12\n    else if (bankType.includes(\"deposit\")) {\n      const compoundedAmount = S * Math.pow(1 + r / 12, n);\n      totalAmount = compoundedAmount;\n      expensesAmount = totalAmount - S;\n    }\n    // For other products (like Kaspi Red)\n    else {\n      const monthlyInterest = r / 12;\n      expensesAmount = S * monthlyInterest * n;\n      totalAmount = S + expensesAmount;\n    }\n    return {\n      totalPrice: totalAmount,\n      expenses: expensesAmount\n    };\n  };\n\n  // Handle the \"Done\" button click\n  const handleDoneClick = async e => {\n    if (debtAmount && bankPercentages[bank] !== undefined && duration) {\n      e.preventDefault();\n      setLoading(true);\n\n      // Reset previous results\n      setTotalPrice(null);\n      setExpenses(null);\n      setRecommendations([]);\n      try {\n        console.log(\"Sending request to Deepseek API...\");\n        const prompt = `Provide brief advice for someone with a ${debtAmount} debt at ${bank.replace(\"_\", \" \")} bank with interest rate of ${bankPercentages[bank] * 100}% for a duration of ${duration} months. Give me the text that is just numerated. without extra text. The format is: 1. _______ 2. ______ 3. _____ `;\n        console.log(\"Prompt sent to Deepseek:\", prompt);\n        const res = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\n          method: \"POST\",\n          headers: {\n            Authorization: \"Bearer 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\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            model: \"deepseek/deepseek-r1:free\",\n            messages: [{\n              role: \"user\",\n              content: prompt\n            }]\n          })\n        });\n        const data = await res.json();\n        console.log(\"Full API response:\", data);\n        const aiResponse = data.choices[0].message.content;\n        console.log(\"Deepseek message content:\", aiResponse);\n        const parsedRecommendations = parseRecommendations(aiResponse);\n        setRecommendations(parsedRecommendations);\n      } catch (error) {\n        console.error(\"Error fetching AI response:\", error);\n        setRecommendations([\"Не удалось получить рекомендации. Пожалуйста, попробуйте снова.\", \"Проверьте ваше интернет-соединение.\", \"Обратитесь в службу поддержки банка за консультацией.\"]);\n      } finally {\n        setLoading(false);\n      }\n\n      // Calculate debt information using the new formulas\n      const debt = parseFloat(debtAmount);\n      const percentage = bankPercentages[bank];\n      const months = parseInt(duration);\n      const {\n        totalPrice: calculatedTotalPrice,\n        expenses: calculatedExpenses\n      } = calculateFinancials(debt, percentage, months, bank);\n      setExpenses(calculatedExpenses);\n      setTotalPrice(calculatedTotalPrice);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"layout-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"layout-content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"banner\",\n        style: {\n          backgroundImage: \"url('/shapka.png')\" // Adjust the path as needed\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"DebtPop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Enter the debt amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"100,000\",\n            value: debtAmount,\n            onChange: handleDebtAmountChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select bank\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: bank,\n            onChange: handleBankChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select an option\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 15\n            }, this), Object.entries(bankDisplayNames).map(([value, label]) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: value,\n              children: label\n            }, value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Enter duration (months)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"12\",\n            value: duration,\n            onChange: handleDurationChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDoneClick,\n          disabled: !debtAmount || isNaN(debtAmount) || !bank || !duration || isNaN(duration) || loading,\n          children: loading ? \"Calculating...\" : \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), totalPrice !== null && expenses !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"price-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Total final price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [totalPrice.toLocaleString(), \" \\u20B8\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Expenses\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [expenses.toLocaleString(), \" \\u20B8\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Hints and Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-recommendations\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Getting personalized recommendations...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recommendations-container\",\n        children: recommendations.length > 0 ? recommendations.map((recommendation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hint-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              width: \"24px\",\n              height: \"24px\",\n              fill: \"currentColor\",\n              viewBox: \"0 0 256 256\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M176,232a8,8,0,0,1-8,8H88a8,8,0,0,1,0-16h80A8,8,0,0,1,176,232Zm40-128a87.55,87.55,0,0,1-33.64,69.21A16.24,16.24,0,0,0,176,186v6a16,16,0,0,1-16,16H96a16,16,0,0,1-16-16v-6a16,16,0,0,0-6.23-12.66A87.59,87.59,0,0,1,40,104.49C39.74,56.83,78.26,17.14,125.88,16A88,88,0,0,1,216,104Z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 577,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"hint-text\",\n            children: recommendation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 19\n        }, this)) :\n        // Default recommendations when no AI recommendations are available yet\n        [\"Pay off your debt as soon as possible\", \"Try to negotiate with the bank for a better rate\", \"If you have multiple debts, consider consolidating them\"].map((hint, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hint-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hint-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              width: \"24px\",\n              height: \"24px\",\n              fill: \"currentColor\",\n              viewBox: \"0 0 256 256\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M176,232a8,8,0,0,1-8,8H88a8,8,0,0,1,0-16h80A8,8,0,0,1,176,232Zm40-128a87.55,87.55,0,0,1-33.64,69.21A16.24,16.24,0,0,0,176,186v6a16,16,0,0,1-16,16H96a16,16,0,0,1-16-16v-6a16,16,0,0,0-6.23-12.66A87.59,87.59,0,0,1,40,104.49C39.74,56.83,78.26,17.14,125.88,16A88,88,0,0,1,216,104Z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 598,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"hint-text\",\n            children: hint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 5\n  }, this);\n};\n_s(DebtPop, \"h1WSNrmPupQcWnwriU+mK/c77mA=\");\n_c = DebtPop;\nexport default DebtPop;\nvar _c;\n$RefreshReg$(_c, \"DebtPop\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DebtPop","_s","debtAmount","setDebtAmount","bank","setBank","duration","setDuration","totalPrice","setTotalPrice","expenses","setExpenses","recommendations","setRecommendations","loading","setLoading","bankPercentages","kaspi","kaspi_debt","kaspi_deposit","jusan_debt","jusan_deposit","bankDisplayNames","handleDebtAmountChange","e","target","value","handleBankChange","handleDurationChange","parseRecommendations","response","console","log","regex","matches","matchAll","map","match","trim","length","lineRecommendations","split","filter","line","slice","calculateFinancials","debt","percentage","months","bankType","r","S","n","totalAmount","expensesAmount","includes","monthlyRate","denominator","Math","pow","monthlyPayment","compoundedAmount","monthlyInterest","handleDoneClick","undefined","preventDefault","prompt","replace","res","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","data","json","aiResponse","choices","message","parsedRecommendations","error","parseFloat","parseInt","calculatedTotalPrice","calculatedExpenses","className","children","style","backgroundImage","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","Object","entries","label","onClick","disabled","isNaN","toLocaleString","recommendation","index","xmlns","width","height","fill","viewBox","d","hint","_c","$RefreshReg$"],"sources":["C:/Users/erali/Desktop/web_dev/slc_project/src/DeptPop.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./DebtPop.css\"; // Import external CSS file\r\n\r\n// const DebtPop = () => {\r\n//   const [debtAmount, setDebtAmount] = useState(\"\");\r\n//   const [bank, setBank] = useState(\"\");\r\n//   const [duration, setDuration] = useState(\"\");\r\n//   const [totalPrice, setTotalPrice] = useState(null);\r\n//   const [expenses, setExpenses] = useState(null);\r\n//   const [recommendations, setRecommendations] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const bankPercentages = {\r\n//     kaspi: 0.01,\r\n//     kaspi_debt: 0.02,\r\n//     kaspi_deposit: 0.03,\r\n//     jusan_debt: 0.04,\r\n//     jusan_deposit: 0.05,\r\n//   };\r\n\r\n//   // Bank display names for better readability\r\n//   const bankDisplayNames = {\r\n//     kaspi: \"Kaspi Red\",\r\n//     kaspi_debt: \"Kaspi Кредит\",\r\n//     kaspi_deposit: \"Kaspi Депозит\",\r\n//     jusan_debt: \"Jusan Кредит\",\r\n//     jusan_deposit: \"Jusan Депозит\",\r\n//   };\r\n\r\n//   // Handle debt amount change\r\n//   const handleDebtAmountChange = (e) => {\r\n//     setDebtAmount(e.target.value);\r\n//   };\r\n\r\n//   // Handle bank selection change\r\n//   const handleBankChange = (e) => {\r\n//     setBank(e.target.value);\r\n//   };\r\n\r\n//   // Handle duration change\r\n//   const handleDurationChange = (e) => {\r\n//     setDuration(e.target.value);\r\n//   };\r\n\r\n//   // Parse AI response to extract recommendations\r\n//   const parseRecommendations = (response) => {\r\n//     // Log the full response to console\r\n//     console.log(\"Full Deepseek Response:\", response);\r\n\r\n//     // Look for numbered items (1. 2. 3.) or bullet points\r\n//     const regex = /(?:\\d+\\.\\s*|\\*\\s*|-)(.+?)(?=\\d+\\.\\s*|\\*\\s*|-|$)/gs;\r\n//     const matches = [...response.matchAll(regex)].map((match) =>\r\n//       match[1].trim()\r\n//     );\r\n\r\n//     // If regex didn't find numbered recommendations, split by newlines as fallback\r\n//     if (matches.length === 0) {\r\n//       const lineRecommendations = response\r\n//         .split(\"\\n\")\r\n//         .filter((line) => line.trim() !== \"\")\r\n//         .slice(0, 3);\r\n\r\n//       console.log(\"Parsed recommendations (by lines):\", lineRecommendations);\r\n//       return lineRecommendations;\r\n//     }\r\n\r\n//     console.log(\"Parsed recommendations (by regex):\", matches.slice(0, 3));\r\n//     return matches.slice(0, 3); // Return only the first 3 recommendations\r\n//   };\r\n\r\n//   // Handle the \"Done\" button click\r\n//   const handleDoneClick = async (e) => {\r\n//     if (debtAmount && bankPercentages[bank] !== undefined && duration) {\r\n//       e.preventDefault();\r\n//       setLoading(true);\r\n\r\n//       // Reset previous results\r\n//       setTotalPrice(null);\r\n//       setExpenses(null);\r\n//       setRecommendations([]);\r\n\r\n//       try {\r\n//         console.log(\"Sending request to Deepseek API...\");\r\n\r\n//         const prompt = `Provide brief advice for someone with a ${debtAmount} debt at ${bank.replace(\r\n//           \"_\",\r\n//           \" \"\r\n//         )} bank with interest rate of ${\r\n//           bankPercentages[bank] * 100\r\n//         }% for a duration of ${duration} months. Give me the text that is just numerated. without extra text. The format is: 1. _______ 2. ______ 3. _____ `;\r\n\r\n//         console.log(\"Prompt sent to Deepseek:\", prompt);\r\n\r\n//         const res = await fetch(\r\n//           \"https://openrouter.ai/api/v1/chat/completions\",\r\n//           {\r\n//             method: \"POST\",\r\n//             headers: {\r\n//               Authorization:\r\n//                 \"Bearer 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\",\r\n//               \"Content-Type\": \"application/json\",\r\n//             },\r\n//             body: JSON.stringify({\r\n//               model: \"deepseek/deepseek-r1:free\",\r\n//               messages: [\r\n//                 {\r\n//                   role: \"user\",\r\n//                   content: prompt,\r\n//                 },\r\n//               ],\r\n//             }),\r\n//           }\r\n//         );\r\n\r\n//         const data = await res.json();\r\n//         console.log(\"Full API response:\", data);\r\n\r\n//         const aiResponse = data.choices[0].message.content;\r\n//         console.log(\"Deepseek message content:\", aiResponse);\r\n\r\n//         const parsedRecommendations = parseRecommendations(aiResponse);\r\n//         setRecommendations(parsedRecommendations);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching AI response:\", error);\r\n//         setRecommendations([\r\n//           \"Не удалось получить рекомендации. Пожалуйста, попробуйте снова.\",\r\n//           \"Проверьте ваше интернет-соединение.\",\r\n//           \"Обратитесь в службу поддержки банка за консультацией.\",\r\n//         ]);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n\r\n//       // Calculate debt information\r\n//       const debt = parseFloat(debtAmount);\r\n//       const percentage = bankPercentages[bank];\r\n//       const months = parseInt(duration);\r\n//       const monthlyInterest = percentage / 12;\r\n//       const calculatedExpenses = debt * monthlyInterest * months;\r\n//       const calculatedTotalPrice = debt + calculatedExpenses;\r\n\r\n//       setExpenses(calculatedExpenses);\r\n//       setTotalPrice(calculatedTotalPrice);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"layout-container\">\r\n//       <div className=\"layout-content-container\">\r\n//         {/* Banner Section */}\r\n//         <div\r\n//           className=\"banner\"\r\n//           style={{\r\n//             backgroundImage: \"url('/shapka.png')\", // Adjust the path as needed\r\n//           }}\r\n//         ></div>\r\n\r\n//         {/* Title */}\r\n//         <h3>DebtPop</h3>\r\n\r\n//         {/* Debt Input */}\r\n//         <div className=\"input-container\">\r\n//           <label>\r\n//             <p>Enter the debt amount</p>\r\n//             <input\r\n//               type=\"number\"\r\n//               placeholder=\"100,000\"\r\n//               value={debtAmount}\r\n//               onChange={handleDebtAmountChange}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         {/* Bank Selection */}\r\n//         <div className=\"input-container\">\r\n//           <label>\r\n//             <p>Select bank</p>\r\n//             <select value={bank} onChange={handleBankChange}>\r\n//               <option value=\"\">Select an option</option>\r\n//               {Object.entries(bankDisplayNames).map(([value, label]) => (\r\n//                 <option key={value} value={value}>\r\n//                   {label}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </label>\r\n//         </div>\r\n\r\n//         {/* Duration Input */}\r\n//         <div className=\"input-container\">\r\n//           <label>\r\n//             <p>Enter duration (months)</p>\r\n//             <input\r\n//               type=\"number\"\r\n//               placeholder=\"12\"\r\n//               value={duration}\r\n//               onChange={handleDurationChange}\r\n//             />\r\n//           </label>\r\n//         </div>\r\n\r\n//         {/* Button Container */}\r\n//         <div className=\"button-container\">\r\n//           <button\r\n//             onClick={handleDoneClick}\r\n//             disabled={\r\n//               !debtAmount ||\r\n//               isNaN(debtAmount) ||\r\n//               !bank ||\r\n//               !duration ||\r\n//               isNaN(duration) ||\r\n//               loading\r\n//             }\r\n//           >\r\n//             {loading ? \"Calculating...\" : \"Done\"}\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Results Section - Only shown after calculation */}\r\n//         {totalPrice !== null && expenses !== null && (\r\n//           <div className=\"results-section\">\r\n//             {/* Price Summary */}\r\n//             <div className=\"price-summary\">\r\n//               <div>\r\n//                 <p>Total final price</p>\r\n//                 <p>{totalPrice.toLocaleString()} ₸</p>\r\n//               </div>\r\n//               <div>\r\n//                 <p>Expenses</p>\r\n//                 <p>{expenses.toLocaleString()} ₸</p>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* Hints Section */}\r\n//         <h3>Hints and Recommendations</h3>\r\n//         {loading ? (\r\n//           <div className=\"loading-recommendations\">\r\n//             <p>Getting personalized recommendations...</p>\r\n//           </div>\r\n//         ) : (\r\n//           <div className=\"recommendations-container\">\r\n//             {recommendations.length > 0\r\n//               ? recommendations.map((recommendation, index) => (\r\n//                   <div key={index} className=\"hint-container\">\r\n//                     <div className=\"hint-icon\">\r\n//                       <svg\r\n//                         xmlns=\"http://www.w3.org/2000/svg\"\r\n//                         width=\"24px\"\r\n//                         height=\"24px\"\r\n//                         fill=\"currentColor\"\r\n//                         viewBox=\"0 0 256 256\"\r\n//                       >\r\n//                         <path d=\"M176,232a8,8,0,0,1-8,8H88a8,8,0,0,1,0-16h80A8,8,0,0,1,176,232Zm40-128a87.55,87.55,0,0,1-33.64,69.21A16.24,16.24,0,0,0,176,186v6a16,16,0,0,1-16,16H96a16,16,0,0,1-16-16v-6a16,16,0,0,0-6.23-12.66A87.59,87.59,0,0,1,40,104.49C39.74,56.83,78.26,17.14,125.88,16A88,88,0,0,1,216,104Z\" />\r\n//                       </svg>\r\n//                     </div>\r\n//                     <p className=\"hint-text\">{recommendation}</p>\r\n//                   </div>\r\n//                 ))\r\n//               : // Default recommendations when no AI recommendations are available yet\r\n//                 [\r\n//                   \"Pay off your debt as soon as possible\",\r\n//                   \"Try to negotiate with the bank for a better rate\",\r\n//                   \"If you have multiple debts, consider consolidating them\",\r\n//                 ].map((hint, index) => (\r\n//                   <div key={index} className=\"hint-container\">\r\n//                     <div className=\"hint-icon\">\r\n//                       <svg\r\n//                         xmlns=\"http://www.w3.org/2000/svg\"\r\n//                         width=\"24px\"\r\n//                         height=\"24px\"\r\n//                         fill=\"currentColor\"\r\n//                         viewBox=\"0 0 256 256\"\r\n//                       >\r\n//                         <path d=\"M176,232a8,8,0,0,1-8,8H88a8,8,0,0,1,0-16h80A8,8,0,0,1,176,232Zm40-128a87.55,87.55,0,0,1-33.64,69.21A16.24,16.24,0,0,0,176,186v6a16,16,0,0,1-16,16H96a16,16,0,0,1-16-16v-6a16,16,0,0,0-6.23-12.66A87.59,87.59,0,0,1,40,104.49C39.74,56.83,78.26,17.14,125.88,16A88,88,0,0,1,216,104Z\" />\r\n//                       </svg>\r\n//                     </div>\r\n//                     <p className=\"hint-text\">{hint}</p>\r\n//                   </div>\r\n//                 ))}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DebtPop;\r\n\r\nconst DebtPop = () => {\r\n  const [debtAmount, setDebtAmount] = useState(\"\");\r\n  const [bank, setBank] = useState(\"\");\r\n  const [duration, setDuration] = useState(\"\");\r\n  const [totalPrice, setTotalPrice] = useState(null);\r\n  const [expenses, setExpenses] = useState(null);\r\n  const [recommendations, setRecommendations] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const bankPercentages = {\r\n    kaspi: 0.01,\r\n    kaspi_debt: 0.02,\r\n    kaspi_deposit: 0.03,\r\n    jusan_debt: 0.04,\r\n    jusan_deposit: 0.05,\r\n  };\r\n\r\n  // Bank display names for better readability\r\n  const bankDisplayNames = {\r\n    kaspi: \"Kaspi Red\",\r\n    kaspi_debt: \"Kaspi Кредит\",\r\n    kaspi_deposit: \"Kaspi Депозит\",\r\n    jusan_debt: \"Jusan Кредит\",\r\n    jusan_deposit: \"Jusan Депозит\",\r\n  };\r\n\r\n  // Handle debt amount change\r\n  const handleDebtAmountChange = (e) => {\r\n    setDebtAmount(e.target.value);\r\n  };\r\n\r\n  // Handle bank selection change\r\n  const handleBankChange = (e) => {\r\n    setBank(e.target.value);\r\n  };\r\n\r\n  // Handle duration change\r\n  const handleDurationChange = (e) => {\r\n    setDuration(e.target.value);\r\n  };\r\n\r\n  // Parse AI response to extract recommendations\r\n  const parseRecommendations = (response) => {\r\n    // Log the full response to console\r\n    console.log(\"Full Deepseek Response:\", response);\r\n\r\n    // Look for numbered items (1. 2. 3.) or bullet points\r\n    const regex = /(?:\\d+\\.\\s*|\\*\\s*|-)(.+?)(?=\\d+\\.\\s*|\\*\\s*|-|$)/gs;\r\n    const matches = [...response.matchAll(regex)].map((match) =>\r\n      match[1].trim()\r\n    );\r\n\r\n    // If regex didn't find numbered recommendations, split by newlines as fallback\r\n    if (matches.length === 0) {\r\n      const lineRecommendations = response\r\n        .split(\"\\n\")\r\n        .filter((line) => line.trim() !== \"\")\r\n        .slice(0, 3);\r\n\r\n      console.log(\"Parsed recommendations (by lines):\", lineRecommendations);\r\n      return lineRecommendations;\r\n    }\r\n\r\n    console.log(\"Parsed recommendations (by regex):\", matches.slice(0, 3));\r\n    return matches.slice(0, 3); // Return only the first 3 recommendations\r\n  };\r\n\r\n  // Calculate total price and expenses based on bank type\r\n  const calculateFinancials = (debt, percentage, months, bankType) => {\r\n    const r = percentage;\r\n    const S = debt;\r\n    const n = months;\r\n    let totalAmount = 0;\r\n    let expensesAmount = 0;\r\n\r\n    // For credit products: ((S * r/12) / (1- (1+r/12)^-n)) * 12\r\n    if (bankType.includes(\"debt\")) {\r\n      const monthlyRate = r / 12;\r\n      const denominator = 1 - Math.pow(1 + monthlyRate, -n);\r\n      const monthlyPayment = (S * monthlyRate) / denominator;\r\n      totalAmount = monthlyPayment * n;\r\n      expensesAmount = totalAmount - S;\r\n    }\r\n    // For deposit products: (S * (1+r/12)^n) * 12\r\n    else if (bankType.includes(\"deposit\")) {\r\n      const compoundedAmount = S * Math.pow(1 + r / 12, n);\r\n      totalAmount = compoundedAmount;\r\n      expensesAmount = totalAmount - S;\r\n    }\r\n    // For other products (like Kaspi Red)\r\n    else {\r\n      const monthlyInterest = r / 12;\r\n      expensesAmount = S * monthlyInterest * n;\r\n      totalAmount = S + expensesAmount;\r\n    }\r\n\r\n    return {\r\n      totalPrice: totalAmount,\r\n      expenses: expensesAmount,\r\n    };\r\n  };\r\n\r\n  // Handle the \"Done\" button click\r\n  const handleDoneClick = async (e) => {\r\n    if (debtAmount && bankPercentages[bank] !== undefined && duration) {\r\n      e.preventDefault();\r\n      setLoading(true);\r\n\r\n      // Reset previous results\r\n      setTotalPrice(null);\r\n      setExpenses(null);\r\n      setRecommendations([]);\r\n\r\n      try {\r\n        console.log(\"Sending request to Deepseek API...\");\r\n\r\n        const prompt = `Provide brief advice for someone with a ${debtAmount} debt at ${bank.replace(\r\n          \"_\",\r\n          \" \"\r\n        )} bank with interest rate of ${\r\n          bankPercentages[bank] * 100\r\n        }% for a duration of ${duration} months. Give me the text that is just numerated. without extra text. The format is: 1. _______ 2. ______ 3. _____ `;\r\n\r\n        console.log(\"Prompt sent to Deepseek:\", prompt);\r\n\r\n        const res = await fetch(\r\n          \"https://openrouter.ai/api/v1/chat/completions\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              Authorization:\r\n                \"Bearer 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\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              model: \"deepseek/deepseek-r1:free\",\r\n              messages: [\r\n                {\r\n                  role: \"user\",\r\n                  content: prompt,\r\n                },\r\n              ],\r\n            }),\r\n          }\r\n        );\r\n\r\n        const data = await res.json();\r\n        console.log(\"Full API response:\", data);\r\n\r\n        const aiResponse = data.choices[0].message.content;\r\n        console.log(\"Deepseek message content:\", aiResponse);\r\n\r\n        const parsedRecommendations = parseRecommendations(aiResponse);\r\n        setRecommendations(parsedRecommendations);\r\n      } catch (error) {\r\n        console.error(\"Error fetching AI response:\", error);\r\n        setRecommendations([\r\n          \"Не удалось получить рекомендации. Пожалуйста, попробуйте снова.\",\r\n          \"Проверьте ваше интернет-соединение.\",\r\n          \"Обратитесь в службу поддержки банка за консультацией.\",\r\n        ]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n\r\n      // Calculate debt information using the new formulas\r\n      const debt = parseFloat(debtAmount);\r\n      const percentage = bankPercentages[bank];\r\n      const months = parseInt(duration);\r\n\r\n      const { totalPrice: calculatedTotalPrice, expenses: calculatedExpenses } =\r\n        calculateFinancials(debt, percentage, months, bank);\r\n\r\n      setExpenses(calculatedExpenses);\r\n      setTotalPrice(calculatedTotalPrice);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"layout-container\">\r\n      <div className=\"layout-content-container\">\r\n        {/* Banner Section */}\r\n        <div\r\n          className=\"banner\"\r\n          style={{\r\n            backgroundImage: \"url('/shapka.png')\", // Adjust the path as needed\r\n          }}\r\n        ></div>\r\n\r\n        {/* Title */}\r\n        <h3>DebtPop</h3>\r\n\r\n        {/* Debt Input */}\r\n        <div className=\"input-container\">\r\n          <label>\r\n            <p>Enter the debt amount</p>\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"100,000\"\r\n              value={debtAmount}\r\n              onChange={handleDebtAmountChange}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        {/* Bank Selection */}\r\n        <div className=\"input-container\">\r\n          <label>\r\n            <p>Select bank</p>\r\n            <select value={bank} onChange={handleBankChange}>\r\n              <option value=\"\">Select an option</option>\r\n              {Object.entries(bankDisplayNames).map(([value, label]) => (\r\n                <option key={value} value={value}>\r\n                  {label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n        </div>\r\n\r\n        {/* Duration Input */}\r\n        <div className=\"input-container\">\r\n          <label>\r\n            <p>Enter duration (months)</p>\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"12\"\r\n              value={duration}\r\n              onChange={handleDurationChange}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        {/* Button Container */}\r\n        <div className=\"button-container\">\r\n          <button\r\n            onClick={handleDoneClick}\r\n            disabled={\r\n              !debtAmount ||\r\n              isNaN(debtAmount) ||\r\n              !bank ||\r\n              !duration ||\r\n              isNaN(duration) ||\r\n              loading\r\n            }\r\n          >\r\n            {loading ? \"Calculating...\" : \"Done\"}\r\n          </button>\r\n        </div>\r\n\r\n        {/* Results Section - Only shown after calculation */}\r\n        {totalPrice !== null && expenses !== null && (\r\n          <div className=\"results-section\">\r\n            {/* Price Summary */}\r\n            <div className=\"price-summary\">\r\n              <div>\r\n                <p>Total final price</p>\r\n                <p>{totalPrice.toLocaleString()} ₸</p>\r\n              </div>\r\n              <div>\r\n                <p>Expenses</p>\r\n                <p>{expenses.toLocaleString()} ₸</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Hints Section */}\r\n        <h3>Hints and Recommendations</h3>\r\n        {loading ? (\r\n          <div className=\"loading-recommendations\">\r\n            <p>Getting personalized recommendations...</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"recommendations-container\">\r\n            {recommendations.length > 0\r\n              ? recommendations.map((recommendation, index) => (\r\n                  <div key={index} className=\"hint-container\">\r\n                    <div className=\"hint-icon\">\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"24px\"\r\n                        height=\"24px\"\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 256 256\"\r\n                      >\r\n                        <path d=\"M176,232a8,8,0,0,1-8,8H88a8,8,0,0,1,0-16h80A8,8,0,0,1,176,232Zm40-128a87.55,87.55,0,0,1-33.64,69.21A16.24,16.24,0,0,0,176,186v6a16,16,0,0,1-16,16H96a16,16,0,0,1-16-16v-6a16,16,0,0,0-6.23-12.66A87.59,87.59,0,0,1,40,104.49C39.74,56.83,78.26,17.14,125.88,16A88,88,0,0,1,216,104Z\" />\r\n                      </svg>\r\n                    </div>\r\n                    <p className=\"hint-text\">{recommendation}</p>\r\n                  </div>\r\n                ))\r\n              : // Default recommendations when no AI recommendations are available yet\r\n                [\r\n                  \"Pay off your debt as soon as possible\",\r\n                  \"Try to negotiate with the bank for a better rate\",\r\n                  \"If you have multiple debts, consider consolidating them\",\r\n                ].map((hint, index) => (\r\n                  <div key={index} className=\"hint-container\">\r\n                    <div className=\"hint-icon\">\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"24px\"\r\n                        height=\"24px\"\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 256 256\"\r\n                      >\r\n                        <path d=\"M176,232a8,8,0,0,1-8,8H88a8,8,0,0,1,0-16h80A8,8,0,0,1,176,232Zm40-128a87.55,87.55,0,0,1-33.64,69.21A16.24,16.24,0,0,0,176,186v6a16,16,0,0,1-16,16H96a16,16,0,0,1-16-16v-6a16,16,0,0,0-6.23-12.66A87.59,87.59,0,0,1,40,104.49C39.74,56.83,78.26,17.14,125.88,16A88,88,0,0,1,216,104Z\" />\r\n                      </svg>\r\n                    </div>\r\n                    <p className=\"hint-text\">{hint}</p>\r\n                  </div>\r\n                ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DebtPop;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}